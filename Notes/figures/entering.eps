%!PS-Adobe-3.0 EPSF-3.0
%%Creator: xpdf/pdftops 2.01
%%LanguageLevel: 2
%%BoundingBox: 0 416 576 752
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 2.01 0
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 14 def
/pdfSetup {
  3 1 roll 2 array astore
  /setpagedevice where {
    pop 3 dict begin
      /PageSize exch def
      /ImagingBBox null def
      /Policies 1 dict dup begin /PageSize 3 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
} def
/pdfEndPage { end } def
% separation convention operators
/findcmykcustomcolor where {
  pop
}{
  /findcmykcustomcolor { 5 array astore } def
} ifelse
/setcustomcolor where {
  pop
}{
  /setcustomcolor {
    exch
    [ exch /Separation exch dup 4 get exch /DeviceCMYK exch
      0 4 getinterval cvx
      [ exch /dup load exch { mul exch dup } /forall load
        /pop load dup ] cvx
    ] setcolorspace setcolor
  } def
} ifelse
/customcolorimage where {
  pop
}{
  /customcolorimage {
    gsave
    [ exch /Separation exch dup 4 get exch /DeviceCMYK exch
      0 4 getinterval cvx
      [ exch /dup load exch { mul exch dup } /forall load
        /pop load dup ] cvx
    ] setcolorspace
    10 dict begin
      /ImageType 1 def
      /DataSource exch def
      /ImageMatrix exch def
      /BitsPerComponent exch def
      /Height exch def
      /Width exch def
      /Decode [1 0] def
    currentdict end
    image
    grestore
  } def
} ifelse
% PDF color state
/sCol {
  pdfLastStroke not {
    pdfStroke aload length
    dup 1 eq {
      pop setgray
    }{
      dup 3 eq {
        pop setrgbcolor
      }{
        4 eq {
          setcmykcolor
        }{
          findcmykcustomcolor exch setcustomcolor
        } ifelse
      } ifelse
    } ifelse
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
/fCol {
  pdfLastFill not {
    pdfFill aload length
    dup 1 eq {
      pop setgray
    }{
      dup 3 eq {
        pop setrgbcolor
      }{
        4 eq {
          setcmykcolor
        }{
          findcmykcustomcolor exch setcustomcolor
        } ifelse
      } ifelse
    } ifelse
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16L3 {
  1 index /CIDFont resourcestatus {
    pop pop 1 index /CIDFont findresource /CIDFontType known
  } {
    false
  } ifelse
  {
    0 eq { /Identity-H } { /Identity-V } ifelse
    exch 1 array astore composefont pop
  } {
    pdfMakeFont16
  } ifelse
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q { end grestore } def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% color operators
/g { dup 1 array astore /pdfFill exch def setgray
     /pdfLastFill true def /pdfLastStroke false def } def
/G { dup 1 array astore /pdfStroke exch def setgray
     /pdfLastStroke true def /pdfLastFill false def } def
/rg { 3 copy 3 array astore /pdfFill exch def setrgbcolor
      /pdfLastFill true def /pdfLastStroke false def } def
/RG { 3 copy 3 array astore /pdfStroke exch def setrgbcolor
      /pdfLastStroke true def /pdfLastFill false def } def
/k { 4 copy 4 array astore /pdfFill exch def setcmykcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/K { 4 copy 4 array astore /pdfStroke exch def setcmykcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/ck { 6 copy 6 array astore /pdfFill exch def
      findcmykcustomcolor exch setcustomcolor
      /pdfLastFill true def /pdfLastStroke false def } def
/CK { 6 copy 6 array astore /pdfStroke exch def
      findcmykcustomcolor exch setcustomcolor
      /pdfLastStroke true def /pdfLastFill false def } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/awcp { % awidthcharpath
  exch {
    1 string dup 0 3 index put 2 index charpath
    3 index 3 index rmoveto
    4 index eq { 5 index 5 index rmoveto } if
  } forall
  6 {pop} repeat
} def
/Tj { fCol
      0 pdfTextRise pdfTextMat dtransform rmoveto
      1 index stringwidth pdfTextMat idtransform pop
      sub 1 index length dup 0 ne { div } { pop pop 0 } ifelse
      pdfWordSpacing pdfHorizScaling mul 0 pdfTextMat dtransform 32
      4 3 roll pdfCharSpacing pdfHorizScaling mul add 0
      pdfTextMat dtransform
      6 5 roll
      currentpoint 8 2 roll
      pdfTextRender 1 and 0 eq {
        6 copy awidthshow
      } if
      pdfTextRender 3 and dup 1 eq exch 2 eq or {
        8 6 roll moveto
        currentfont /FontType get 3 eq { fCol } { sCol } ifelse
        false awcp currentpoint stroke moveto
      } {
        8 {pop} repeat
      } ifelse
      0 pdfTextRise neg pdfTextMat dtransform rmoveto } def
/Tj16 { pdfTextRender 1 and 0 eq { fCol } { sCol } ifelse
        0 pdfTextRise pdfTextMat dtransform rmoveto
        2 index stringwidth pdfTextMat idtransform pop
        sub exch div
        pdfWordSpacing pdfHorizScaling mul 0 pdfTextMat dtransform 32
        4 3 roll pdfCharSpacing pdfHorizScaling mul add 0
        pdfTextMat dtransform
        6 5 roll awidthshow
        0 pdfTextRise neg pdfTextMat dtransform rmoveto } def
/Tj16V { pdfTextRender 1 and 0 eq { fCol } { sCol } ifelse
         0 pdfTextRise pdfTextMat dtransform rmoveto
         2 index stringwidth pdfTextMat idtransform exch pop
         sub exch div
         0 pdfWordSpacing pdfTextMat dtransform 32
         4 3 roll pdfCharSpacing add 0 exch
         pdfTextMat dtransform
         6 5 roll awidthshow
         0 pdfTextRise neg pdfTextMat dtransform rmoveto } def
/TJm { pdfFontSize 0.001 mul mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { pdfFontSize 0.001 mul mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
% Level 1 image operators
/pdfIm1 {
  /pdfImBuf1 4 index string def
  { currentfile pdfImBuf1 readhexstring pop } image
} def
/pdfIm1Sep {
  /pdfImBuf1 4 index string def
  /pdfImBuf2 4 index string def
  /pdfImBuf3 4 index string def
  /pdfImBuf4 4 index string def
  { currentfile pdfImBuf1 readhexstring pop }
  { currentfile pdfImBuf2 readhexstring pop }
  { currentfile pdfImBuf3 readhexstring pop }
  { currentfile pdfImBuf4 readhexstring pop }
  true 4 colorimage
} def
/pdfImM1 {
  /pdfImBuf1 4 index 7 add 8 idiv string def
  { currentfile pdfImBuf1 readhexstring pop } imagemask
} def
% Level 2 image operators
/pdfImBuf 100 string def
/pdfIm {
  image
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfImSep {
  findcmykcustomcolor exch
  dup /Width get /pdfImBuf1 exch string def
  begin Width Height BitsPerComponent ImageMatrix DataSource end
  /pdfImData exch def
  { pdfImData pdfImBuf1 readstring pop
    0 1 2 index length 1 sub {
      1 index exch 2 copy get 255 exch sub put
    } for }
  6 5 roll customcolorimage
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfImM {
  fCol imagemask
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
end
%%EndResource
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
%<ipe version="6.0">
%<info created="D:20030428185705" modified="D:20030428185926" bbox="cropbox"/>
%<page mediabox="0 0 595 842">
%<layer name="alpha"/>
%<path layer="alpha" fill="gray7" pen="fat">
%490.667 565.333 m
%470.287 536.802 l
%504.352 541.383 l h
%</path>
%<path fill="gray7" pen="fat">
%96 608 m
%79.6091 575.218 l
%107.464 585.073 l h
%</path>
%<path stroke="black" pen="fat">
%384 736 m
%576 640 l
%</path>
%<path fill="gray7" pen="fat">
%192 608 m
%0 512 l
%0 496 l
%192 592 l h
%</path>
%<path stroke="black" pen="fat">
%0 416 m
%128 672 l
%</path>
%<path stroke="black" pen="fat">
%64 672 m
%192 416 l
%</path>
%<path stroke="black" pen="fat">
%384 416 m
%544 640 l
%</path>
%<path stroke="black" pen="fat">
%448 640 m
%576 416 l
%</path>
%<path stroke="black" pen="fat">
%0 512 m
%192 608 l
%</path>
%<path fill="gray7" pen="fat">
%576 656 m
%576 640 l
%384 736 l
%384 752 l h
%</path>
%</page>
%</ipe>
pdfStartPage
[] 0 d
0 i
0 j
0 J
10 M
1 w
0 g
0 G
0 416 576 336 re
W
q
q
1.2 w
0.875 g
490.667 565.333 m
470.287 536.802 l
504.352 541.383 l
490.667 565.333 l
h
f*
Q
q
1.2 w
0.875 g
96 608 m
79.6091 575.218 l
107.464 585.073 l
96 608 l
h
f*
Q
q
1.2 w
384 736 m
576 640 l
S
Q
q
1.2 w
0.875 g
192 608 m
0 512 l
0 496 l
192 592 l
192 608 l
h
f*
Q
q
1.2 w
0 416 m
128 672 l
S
Q
q
1.2 w
64 672 m
192 416 l
S
Q
q
1.2 w
384 416 m
544 640 l
S
Q
q
1.2 w
448 640 m
576 416 l
S
Q
q
1.2 w
0 512 m
192 608 l
S
Q
q
1.2 w
0.875 g
576 656 m
576 640 l
384 736 l
384 752 l
576 656 l
h
f*
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
